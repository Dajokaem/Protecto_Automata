/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package GUI;

import java.util.List;
import java.util.ArrayList;

/**
 *
 * @author jos56
 */
public class Main extends javax.swing.JFrame {

    String[] operador = {"*", "/", "+", "-"};

    /**
     * Creates new form Main
     */
    public Main() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        entrada = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        pantalla = new javax.swing.JTextArea();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        entrada.setColumns(20);
        entrada.setRows(5);
        entrada.setCursor(new java.awt.Cursor(java.awt.Cursor.TEXT_CURSOR));
        jScrollPane1.setViewportView(entrada);

        jButton1.setText("Ejecutar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        pantalla.setColumns(20);
        pantalla.setRows(5);
        jScrollPane2.setViewportView(pantalla);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 379, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 112, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 394, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(6, 6, 6)
                        .addComponent(jButton1)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 462, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(22, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        String codigo = entrada.getText();
        String[] division = codigo.split("\n");
        EvaluarSintaxis(division);
        System.out.println("Ha funcionado");
        /*
        List<String> expresion = new ArrayList<String>();
        expresion = descomponer(codigo);
        */

    }//GEN-LAST:event_jButton1ActionPerformed

    /**
     * @param args the command line arguments
     */
 

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextArea entrada;
    private javax.swing.JButton jButton1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTextArea pantalla;
    // End of variables declaration//GEN-END:variables

    private List<String> descomponer(String codigo) {
        // TODO add your handling code here:

        String[] divisiones = codigo.split("\n");
        List<String> expresion = new ArrayList<String>();
        int i = 0;
        String temp = "";
        for (String a : divisiones) {
            temp = a.substring(1, a.length() - 1);
            expresion.add(temp);
            temp = "";
            i++;
        }
        for (String b : expresion) {
            System.out.println(b);
        }
        return expresion;

    }

    private void EvaluarSintaxis(String[] expresion) {
        String[] temp;
        for (String ex : expresion) {
            temp = ex.split("");
            if (!(temp[0].equals("<") && (temp[ex.length() - 1].equals(">")))) {
                //la expresion es invalida desde el princicio
                System.out.println("error inicio");
                error();
                return;
            }
            if (Character.isAlphabetic(ex.charAt(1))) {
                EstadoQ1(ex);
            } else {
                if (Character.isDigit(ex.charAt(1))) {
                    EstadoQ7(ex);
                }
            }
        }

    }

    private void error() {
        System.out.println("Error");
    }

    private void EstadoQ1(String ex) {
        String[] temp = ex.split("");
        String corte;
        int i = 1, j = 0;

        for (String a : temp) {

            if (j == ex.length() - 1) {
                //Quedo atrapado en el automata y es una linea invalida
                System.out.println("error Q1");
                error();
                return;
            }
            if (Character.isAlphabetic(a.charAt(0))) {

                continue;
            } else {
                if (Operador(a)) {
                    corte = ex.substring(i, ex.length());
                    EstadoQ2(corte, i);
                    return;
                } else {
                    if (a.equals("=")) {
                        corte = ex.substring(i+1, ex.length());
                        EstadoQ6(corte, i);
                        return;
                    }
                }
            }
            j++;
            i++;
        }
    }

    private void EstadoQ2(String ex) {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    private void EstadoQ6(String ex, int i) {
        String[] temp = ex.split("");
        int j = i;
        for (String a : temp) {
            System.out.println(a);
            if (Character.isDigit(a.charAt(0))) {
                //Cambio de estado
                continue;
            } else {
                if (a.equals(">")) {
                    //Finaliza el automata y la expresion es aceptada
                    EstadoQ5();
                    return;
                } else {
                    System.out.println("error Q6");
                    error();
                    return;
                }
            }

        }
    }

    private void errorEstado() {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    private void EstadoQ5() {
        System.out.println("Paso el automata");
    }

    private boolean Operador(String a) {
        boolean x = false;
        for (String p : operador) {
            if (a.equals(p)) {
                x = true;
                return x;
            }
        }
        return x;
    }

    private void EstadoQ2(String ex, int i) {
        
    }

    private void EstadoQ7(String ex) {
        String[] temp = ex.split("");
        String corte = "";
        int i = 1, j = 0;
        for (String a : temp) {
            if(a.equals("<")){
                continue;
            }
            if (j == ex.length() - 1) {
                //Quedo atrapado en el automata y es una linea invalida
                error();
                return;
            }
            if (Character.isDigit(a.charAt(0))) {
                continue;
            } else {
                if (Operador(a)) {
                    corte = ex.substring(i, ex.length());
                    EstadoQ8(corte, i);
                } else {
                    if (Character.isAlphabetic(a.charAt(0))) {
                        corte = ex.substring(i, ex.length());
                        EstadoQ2(corte, i);
                    } else {
                        System.out.println("error Q7");
                        error();
                        return;
                    }
                }
            }
            j++;
            i++;
        }
    }

    private void EstadoQ8(String ex, int contador) {
        String[] temp = ex.split("");
        String corte = "";
        int i = 1, j = 0;
        for (String a : temp) {

            if (Character.isDigit(a.charAt(0))) {
                continue;
            } else {
                if (Operador(a)) {
                    corte = ex.substring(i, ex.length());
                    EstadoQ7(corte);
                } else {
                    if (Character.isAlphabetic(a.charAt(0))) {
                        corte = ex.substring(i, ex.length());
                        EstadoQ2(corte, i);
                    } else {
                        if (a.equals(">")) {
                            EstadoQ5();
                            return;
                        } else {
                            System.out.println("error Q8");
                            error();
                            return;
                        }
                    }
                }
            }
            j++;
            i++;
        }
    }
}
